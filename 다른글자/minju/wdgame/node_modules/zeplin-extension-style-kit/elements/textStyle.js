"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _length = _interopRequireDefault(require("../values/length"));

var _color = _interopRequireDefault(require("../values/color"));

var _fontFamily = _interopRequireDefault(require("../declarations/fontFamily"));

var _fontSize = _interopRequireDefault(require("../declarations/fontSize"));

var _fontStyle = _interopRequireDefault(require("../declarations/fontStyle"));

var _fontStretch = _interopRequireDefault(require("../declarations/fontStretch"));

var _fontWeight = _interopRequireDefault(require("../declarations/fontWeight"));

var _fontVariationSettings = _interopRequireDefault(require("../declarations/fontVariationSettings"));

var _fontColor = _interopRequireDefault(require("../declarations/fontColor"));

var _textAlign = _interopRequireDefault(require("../declarations/textAlign"));

var _lineHeight = _interopRequireDefault(require("../declarations/lineHeight"));

var _letterSpacing = _interopRequireDefault(require("../declarations/letterSpacing"));

var _ruleSet = _interopRequireDefault(require("../ruleSet"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Optical sizing is a registered axis too, but its value is utilized in FontVariationSettings
var REGISTERED_AXES = Object.freeze({
  WEIGHT: "wght",
  WIDTH: "wdth",
  SLANT: "slnt",
  ITALIC: "ital"
}); // Reference: https://drafts.csswg.org/css-fonts-4/#valdef-font-style-oblique-angle

var DEFAULT_OBLIQUE_ANGLE = 14;

var useRemUnitForFont = function useRemUnitForFont(_ref) {
  var useForFontSizes = _ref.useForFontSizes;
  return useForFontSizes;
};

var TextStyle = /*#__PURE__*/function () {
  function TextStyle(textStyleObject) {
    _classCallCheck(this, TextStyle);

    this.font = textStyleObject;
    this.declarations = this.collectDeclarations();
  } // eslint-disable-next-line complexity


  _createClass(TextStyle, [{
    key: "collectDeclarations",
    value: function collectDeclarations() {
      var font = this.font;
      var fontWeight;
      var fontStretch;
      var fontStyle;
      var fontVariationSettings;

      if (font.fontVariationSettings) {
        fontWeight = font.fontVariationSettings[REGISTERED_AXES.WEIGHT];
        fontStretch = font.fontVariationSettings[REGISTERED_AXES.WIDTH];

        if (REGISTERED_AXES.SLANT in font.fontVariationSettings) {
          var angle = font.fontVariationSettings[REGISTERED_AXES.SLANT] === DEFAULT_OBLIQUE_ANGLE ? "" : " ".concat(font.fontVariationSettings[REGISTERED_AXES.SLANT], "deg");
          fontStyle = "oblique".concat(angle);
        } else if (font.fontVariationSettings[REGISTERED_AXES.ITALIC]) {
          fontStyle = "italic";
        }

        var registeredAxisNames = Object.values(REGISTERED_AXES);
        fontVariationSettings = Object.fromEntries(Object.entries(font.fontVariationSettings).filter(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 1),
              axisName = _ref3[0];

          return !registeredAxisNames.includes(axisName);
        }));
      } else {
        fontWeight = font.fontWeight;
        fontStretch = font.fontStretch;
        fontStyle = font.fontStyle;
      }

      var declarations = [new _fontFamily.default(font.fontFamily), new _fontSize.default(new _length.default(font.fontSize, {
        useRemUnit: useRemUnitForFont
      })), new _fontWeight.default(fontWeight), new _fontStretch.default(fontStretch), new _fontStyle.default(fontStyle)];

      if (fontVariationSettings) {
        declarations.push(new _fontVariationSettings.default(fontVariationSettings));
      }

      declarations.push(new _lineHeight.default(font.lineHeight || _lineHeight.default.DEFAULT_VALUE, font.fontSize));
      declarations.push(new _letterSpacing.default(font.letterSpacing || _letterSpacing.default.DEFAULT_VALUE));

      if ("textAlign" in font && font.textAlign) {
        declarations.push(new _textAlign.default(font.textAlign));
      }

      if ("color" in font) {
        declarations.push(new _fontColor.default(new _color.default(font.color)));
      }

      return declarations;
    }
  }, {
    key: "style",
    get: function get() {
      return new _ruleSet.default((0, _utils.selectorize)(this.font.name), this.declarations);
    }
  }]);

  return TextStyle;
}();

var _default = TextStyle;
exports.default = _default;