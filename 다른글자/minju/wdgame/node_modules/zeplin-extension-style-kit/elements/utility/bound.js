"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bound = void 0;

var _length = _interopRequireDefault(require("../../values/length"));

var _margin = _interopRequireDefault(require("../../declarations/margin"));

var _padding = _interopRequireDefault(require("../../declarations/padding"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var useRemUnitForMeasurement = function useRemUnitForMeasurement(_ref) {
  var useForMeasurements = _ref.useForMeasurements;
  return useForMeasurements;
};

function getAbsoluteX(_ref2) {
  var parent = _ref2.parent,
      x = _ref2.rect.x;

  if (!parent) {
    return x;
  }

  return getAbsoluteX(parent) + x;
}

function getAbsoluteY(_ref3) {
  var parent = _ref3.parent,
      y = _ref3.rect.y;

  if (!parent) {
    return y;
  }

  return getAbsoluteY(parent) + y;
}

var Bound = /*#__PURE__*/function () {
  function Bound(layer) {
    _classCallCheck(this, Bound);

    this.xMin = getAbsoluteX(layer);
    this.xMax = this.xMin + layer.rect.width;
    this.yMin = getAbsoluteY(layer);
    this.yMax = this.yMin + layer.rect.height;
    this.children = [];
  }

  _createClass(Bound, [{
    key: "findParentFromBounds",
    value: function findParentFromBounds(bounds) {
      var _this = this;

      var parentCandidates = bounds.filter(function (bound) {
        return bound.contains(_this) && _this !== bound;
      });

      var _parentCandidates$sor = parentCandidates.sort(function (a, b) {
        return a.area - b.area;
      }),
          _parentCandidates$sor2 = _slicedToArray(_parentCandidates$sor, 2),
          smallestParent = _parentCandidates$sor2[0],
          secondSmallestParent = _parentCandidates$sor2[1]; // If there is only one smallest parent


      if (smallestParent && smallestParent.area !== (secondSmallestParent && secondSmallestParent.area)) {
        return smallestParent;
      }
    }
  }, {
    key: "setParent",
    value: function setParent(parent) {
      this.parent = parent;
      parent.children.push(this);
    }
  }, {
    key: "contains",
    value: function contains(current) {
      return this.xMin <= current.xMin && this.xMax >= current.xMax && this.yMin <= current.yMin && this.yMax >= current.yMax;
    }
  }, {
    key: "area",
    get: function get() {
      return (this.xMax - this.xMin) * (this.yMax - this.yMin);
    }
  }, {
    key: "key",
    get: function get() {
      return "".concat(this.xMin, "-").concat(this.xMax, "-").concat(this.yMin, "-").concat(this.yMax);
    }
  }, {
    key: "padding",
    get: function get() {
      if (this.children.length === 0) {
        return null;
      }

      return new _padding.default({
        left: new _length.default(Math.min.apply(Math, _toConsumableArray(this.children.map(function (_ref4) {
          var xMin = _ref4.xMin;
          return xMin;
        }))) - this.xMin, {
          useRemUnit: useRemUnitForMeasurement
        }),
        right: new _length.default(this.xMax - Math.max.apply(Math, _toConsumableArray(this.children.map(function (_ref5) {
          var xMax = _ref5.xMax;
          return xMax;
        }))), {
          useRemUnit: useRemUnitForMeasurement
        }),
        top: new _length.default(Math.min.apply(Math, _toConsumableArray(this.children.map(function (_ref6) {
          var yMin = _ref6.yMin;
          return yMin;
        }))) - this.yMin, {
          useRemUnit: useRemUnitForMeasurement
        }),
        bottom: new _length.default(this.yMax - Math.max.apply(Math, _toConsumableArray(this.children.map(function (_ref7) {
          var yMax = _ref7.yMax;
          return yMax;
        }))), {
          useRemUnit: useRemUnitForMeasurement
        })
      });
    }
  }, {
    key: "margin",
    get: function get() {
      var _this2 = this;

      if (!this.parent) {
        return null;
      }

      var parentPadding = this.parent.padding;
      return new _margin.default({
        left: new _length.default(this.xMin - Math.max.apply(Math, _toConsumableArray(this.parent.children.map(function (_ref8) {
          var xMax = _ref8.xMax;
          return xMax;
        }).filter(function (value) {
          return value <= _this2.xMin;
        })).concat([this.parent.xMin + parentPadding.left.value])), {
          useRemUnit: useRemUnitForMeasurement
        }),
        right: new _length.default(Math.min.apply(Math, _toConsumableArray(this.parent.children.map(function (_ref9) {
          var xMin = _ref9.xMin;
          return xMin;
        }).filter(function (value) {
          return value >= _this2.xMax;
        })).concat([this.parent.xMax - parentPadding.right.value])) - this.xMax, {
          useRemUnit: useRemUnitForMeasurement
        }),
        top: new _length.default(this.yMin - Math.max.apply(Math, _toConsumableArray(this.parent.children.map(function (_ref10) {
          var yMax = _ref10.yMax;
          return yMax;
        }).filter(function (value) {
          return value < _this2.yMin;
        })).concat([this.parent.yMin + parentPadding.top.value])), {
          useRemUnit: useRemUnitForMeasurement
        }),
        bottom: new _length.default(Math.min.apply(Math, _toConsumableArray(this.parent.children.map(function (_ref11) {
          var yMin = _ref11.yMin;
          return yMin;
        }).filter(function (value) {
          return value >= _this2.yMax;
        })).concat([this.parent.yMax - parentPadding.bottom.value])) - this.yMax, {
          useRemUnit: useRemUnitForMeasurement
        })
      });
    }
  }], [{
    key: "layersToBounds",
    value: function layersToBounds(layers) {
      return layers.reduce(function (bounds, layer) {
        if (layer.exportable) {
          bounds.push(new Bound(layer));
        } else if (layer.type !== "group" || layer.componentName || layer.fills) {
          bounds.push.apply(bounds, [new Bound(layer)].concat(_toConsumableArray(Bound.layersToBounds(layer.layers))));
        } else {
          bounds.push.apply(bounds, _toConsumableArray(Bound.layersToBounds(layer.layers)));
        }

        return bounds;
      }, []);
    }
  }, {
    key: "layerToBound",
    value: function layerToBound(layer) {
      var _layer$version = layer.version,
          layers = _layer$version.layers,
          _layer$version$image = _layer$version.image,
          width = _layer$version$image.width,
          height = _layer$version$image.height;
      var duplicatedBounds = Bound.layersToBounds(layers);
      var boundMap = new Map(duplicatedBounds.map(function (val) {
        return [val.key, val];
      }));
      var root = new Bound({
        rect: {
          x: 0,
          y: 0,
          width,
          height
        },
        layers: []
      });
      var bounds = Array.from(boundMap, function (_ref12) {
        var _ref13 = _slicedToArray(_ref12, 2),
            _ = _ref13[0],
            bound = _ref13[1];

        return bound;
      });

      if (!boundMap.get(root.key)) {
        boundMap.set(root.key, root);
      }

      boundMap.forEach(function (bound) {
        var parent = bound.findParentFromBounds(bounds);

        if (parent) {
          bound.setParent(parent);
        }
      });
      return boundMap.get(new Bound(layer).key);
    }
  }]);

  return Bound;
}();

exports.Bound = Bound;